<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:WPF_CustomControls.Controls"
    xmlns:system="clr-namespace:System;assembly=system.runtime"
    xmlns:converters="clr-namespace:WPF_CustomControls.Converters"
    xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase">


    <Style TargetType="{x:Type local:BusyIndicator}">
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Height"
                Value="50"/>
        <Setter Property="Width"
                Value="50"/>
        <Setter Property="Foreground"
                Value="SlateGray"/>
        <Setter Property="IndicatorCount"
                Value="6"/>
        <Setter Property="IndicatorTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Ellipse Fill="SlateGray"
                             Width="10" Height="10"
                             Margin="0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BusyIndicator}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Visibility="{TemplateBinding NotBusyVisibility}"
                            CornerRadius="0">
                        <Border.Resources>
                            <converters:CanvasCenteringConverter x:Key="canvasCenteringConverter"/>
                            <converters:DebugConverter x:Key="debugConverter"/>
                        </Border.Resources>
                        <ItemsControl ItemsSource="{TemplateBinding AngleAndPhaseList}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas IsItemsHost="True"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="ContentPresenter">
                                    <Setter Property="Canvas.Left">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource canvasCenteringConverter}">
                                                <Binding ElementName="border"
                                                         Path="ActualWidth"/>
                                                <Binding RelativeSource="{RelativeSource Mode=Self}"
                                                         Path="ActualWidth"/>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Canvas.Top">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource canvasCenteringConverter}">
                                                <Binding ElementName="border"
                                                         Path="ActualHeight"/>
                                                <Binding RelativeSource="{RelativeSource Mode=Self}"
                                                         Path="ActualHeight"/>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Margin"
                                            Value="-2"/>
                                </Style>
                            </ItemsControl.ItemContainerStyle>

                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type system:TimeSpan}">
                                    <ContentPresenter x:Name="contentPresenter" Margin="-2"
                                                      RenderTransformOrigin="0.5,0.5">
                                        <ContentPresenter.RenderTransform>
                                            <TransformGroup>
                                                <TranslateTransform Y="-20"/>
                                                <!-- diagnostics:PresentationTraceSources.TraceLevel=High -->
                                                <!-- N.B. the binding in the rotate transform gives a spurios error 
                                                    unless the rotate transform is named. The binding will still
                                                    work, but a XAML binding error gets thrown regardless.
                                                    See: https://stackoverflow.com/questions/3181890/binding-in-wpf-style-causes-inexplicable-cannot-find-governing-frameworkelement -->
                                                <RotateTransform x:Name="rotateTransform" 
                                                                 Angle="{Binding Path=StartAngle}"/>
                                            </TransformGroup>
                                        </ContentPresenter.RenderTransform>

                                        <!-- HACK Bit hacky, but to allow the user to set a data template so they can customise 
                                            the appearance, have the content of the content presenter be an items control with 
                                            a single item, the ItemTemplate of which is bound to the IndicatorTemplate property
                                            on the BusyIndicator. Note we need the 'outer' DataTemplate to set the RenderTransform -->
                                        <ContentPresenter.Content>
                                            <ItemsControl ItemTemplate="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:BusyIndicator}, Path=IndicatorTemplate}">
                                                <ItemsControl.ItemsSource>
                                                    <x:Array Type="system:Int16">
                                                        <system:Int16>1</system:Int16>
                                                    </x:Array>
                                                </ItemsControl.ItemsSource>
                                            </ItemsControl>
                                            <!--<Ellipse Fill="SlateGray"
                                                     Width="10" Height="10"
                                                     Margin="0"/>-->
                                        </ContentPresenter.Content>

                                        <!--<ContentPresenter.Triggers>
                                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                                        <DoubleAnimation From="{Binding Path=StartAngle}"
                                                                            To="{Binding Path=FinalAngle}"
                                                                            Duration="0:0:1"
                                                                            RepeatBehavior="Forever"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>
                                    </ContentPresenter.Triggers>-->
                                    </ContentPresenter>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsBusy"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:SplitFlapDisplay}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BusyIndicator}">
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
