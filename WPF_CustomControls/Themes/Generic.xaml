<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:WPF_CustomControls.Controls"
    xmlns:system="clr-namespace:System;assembly=system.runtime"
    xmlns:converters="clr-namespace:WPF_CustomControls.Converters">


    <Style TargetType="{x:Type local:BusyIndicator}">
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Height"
                Value="50"/>
        <Setter Property="Width"
                Value="50"/>
        <Setter Property="Foreground"
                Value="SlateGray"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BusyIndicator}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Visibility="{TemplateBinding NotBusyVisibility}"
                            CornerRadius="0">
                        <Border.Resources>
                            <converters:CanvasCenteringConverter x:Key="canvasCenteringConverter"/>
                        </Border.Resources>
                        <ItemsControl ItemsSource="{TemplateBinding AngleAndPhaseList}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="ContentPresenter">
                                    <Setter Property="Canvas.Left">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource canvasCenteringConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding ElementName="border"
                                                             Path="ActualWidth"/>
                                                    <Binding RelativeSource="{RelativeSource Mode=Self}"
                                                             Path="ActualWidth"/>
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Canvas.Top">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource canvasCenteringConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding ElementName="border"
                                                             Path="ActualHeight"/>
                                                    <Binding RelativeSource="{RelativeSource Mode=Self}"
                                                             Path="ActualHeight"/>
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Margin"
                                            Value="-1"/>
                                </Style>
                            </ItemsControl.ItemContainerStyle>

                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type system:TimeSpan}">
                                    <!-- Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}" -->
                                    <Ellipse Fill="SlateGray"
                                             Width="10" Height="10"
                                             Margin="-1"
                                             RenderTransformOrigin="0.5,0.5">
                                        <Ellipse.RenderTransform>
                                            <TransformGroup>
                                                <TranslateTransform Y="-20"/>
                                                <RotateTransform Angle="{Binding Path=StartAngle}"/>
                                            </TransformGroup>
                                        </Ellipse.RenderTransform>
                                        <Ellipse.Triggers>
                                            <EventTrigger RoutedEvent="Ellipse.Loaded">
                                                <EventTrigger.Actions>
                                                    <BeginStoryboard>
                                                        <Storyboard TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                                            <DoubleAnimation From="{Binding Path=StartAngle}" 
                                                                             To="{Binding Path=FinalAngle}"
                                                                             Duration="0:0:1"
                                                                             RepeatBehavior="Forever">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <SineEase EasingMode="EaseInOut" />
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                    <BeginStoryboard>
                                                        <Storyboard TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                                            <ColorAnimation To="Red"
                                                                            Duration="0:0:1"
                                                                            AutoReverse="False"
                                                                            FillBehavior="HoldEnd"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger.Actions>
                                            </EventTrigger>
                                        </Ellipse.Triggers>
                                    </Ellipse>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsBusy"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:SplitFlapDisplay}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BusyIndicator}">
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
